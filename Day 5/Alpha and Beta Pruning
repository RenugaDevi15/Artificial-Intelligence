def check_win(b, p):
    return any(all(b[i][j] == p for j in range(3)) or all(b[j][i] == p for j in range(3)) for i in range(3)) or \
           all(b[i][i] == p for i in range(3)) or all(b[i][2 - i] == p for i in range(3))

def is_full(b): return all(c != ' ' for r in b for c in r)

def minimax(b, a, bta, maxp):
    if check_win(b, 'O'): return 1
    if check_win(b, 'X'): return -1
    if is_full(b): return 0

    if maxp:
        val = -1e9
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'O'
                    val = max(val, minimax(b, a, bta, False))
                    b[i][j] = ' '
                    a = max(a, val)
                    if bta <= a: break
        return val
    else:
        val = 1e9
        for i in range(3):
            for j in range(3):
                if b[i][j] == ' ':
                    b[i][j] = 'X'
                    val = min(val, minimax(b, a, bta, True))
                    b[i][j] = ' '
                    bta = min(bta, val)
                    if bta <= a: break
        return val

def best_move(b):
    best = -1e9
    move = (0, 0)
    for i in range(3):
        for j in range(3):
            if b[i][j] == ' ':
                b[i][j] = 'O'
                score = minimax(b, -1e9, 1e9, False)
                b[i][j] = ' '
                if score > best:
                    best = score
                    move = (i, j)
    return move

# Example usage
board = [[' ']*3 for _ in range(3)]
board[0][0] = 'X'
i, j = best_move(board)
board[i][j] = 'O'
for row in board: print(row)
