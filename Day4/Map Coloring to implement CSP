class MapColoring:
    def __init__(self, variables, domains, neighbors):
        """
        Initialize the CSP problem
        
        Parameters:
        - variables: list of regions to color (e.g., ['WA', 'NT', 'SA', ...])
        - domains: dictionary of possible colors for each variable
        - neighbors: dictionary mapping each region to its adjacent regions
        """
        self.variables = variables
        self.domains = domains
        self.neighbors = neighbors
        self.assignment = {}
    
    def is_consistent(self, var, color, assignment):
        """Check if assigning color to var violates any constraints"""
        for neighbor in self.neighbors[var]:
            if neighbor in assignment and assignment[neighbor] == color:
                return False
        return True
    
    def backtracking_search(self, assignment={}):
        """Recursive backtracking algorithm"""
        if len(assignment) == len(self.variables):
            return assignment
        
        unassigned = [v for v in self.variables if v not in assignment]
        first = unassigned[0]
        
        for color in self.domains[first]:
            if self.is_consistent(first, color, assignment):
                assignment[first] = color
                result = self.backtracking_search(assignment)
                if result is not None:
                    return result
                del assignment[first]
        return None
    
    def solve(self):
        """Solve and return the coloring"""
        return self.backtracking_search()

# Example: Australian Map Coloring
if __name__ == "__main__":
    # Variables (regions)
    regions = ['WA', 'NT', 'SA', 'Q', 'NSW', 'V', 'T']
    
    # Domains (possible colors for each region)
    colors = ['red', 'green', 'blue']
    domains = {r: colors for r in regions}
    
    # Neighbors (adjacent regions that can't share colors)
    neighbors = {
        'WA': ['NT', 'SA'],
        'NT': ['WA', 'SA', 'Q'],
        'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
        'Q': ['NT', 'SA', 'NSW'],
        'NSW': ['Q', 'SA', 'V'],
        'V': ['SA', 'NSW'],
        'T': []
    }
    
    # Create and solve the problem
    map_coloring = MapColoring(regions, domains, neighbors)
    solution = map_coloring.solve()
    
    if solution:
        print("Map Coloring Solution:")
        for region, color in solution.items():
            print(f"{region}: {color}")
    else:
        print("No solution exists")
