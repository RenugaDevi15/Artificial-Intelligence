import heapq

goal = ((1,2,3),(4,5,6),(7,8,0))
moves = [(-1,0),(1,0),(0,-1),(0,1)]

def manhattan(s):
    return sum(abs((v-1)//3 - i) + abs((v-1)%3 - j) for i,row in enumerate(s) for j,v in enumerate(row) if v)

def find_zero(s):
    for i in range(3):
        for j in range(3):
            if s[i][j] == 0:
                return i,j

def neighbors(s):
    i,j = find_zero(s)
    for di,dj in moves:
        ni,nj = i+di,j+dj
        if 0<=ni<3 and 0<=nj<3:
            new = [list(r) for r in s]
            new[i][j], new[ni][nj] = new[ni][nj], new[i][j]
            yield tuple(tuple(r) for r in new)

def solve(start):
    pq = [(manhattan(start), 0, start, [])]
    seen = set()
    while pq:
        est, g, state, path = heapq.heappop(pq)
        if state == goal: return path + [state]
        if state in seen: continue
        seen.add(state)
        for n in neighbors(state):
            if n not in seen:
                heapq.heappush(pq, (g+1+manhattan(n), g+1, n, path + [state]))

# Example usage
start = ((1,2,3),(4,0,6),(7,5,8))
result = solve(start)
