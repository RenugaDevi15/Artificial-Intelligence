import numpy as np

# Activation function (Sigmoid) and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_deriv(x):
    return x * (1 - x)

# Input data (4 samples, 2 features each)
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

# Output labels (XOR problem)
y = np.array([[0], [1], [1], [0]])

# Initialize weights and biases randomly
np.random.seed(0)
input_size = 2
hidden_size = 4
output_size = 1

W1 = np.random.rand(input_size, hidden_size)
b1 = np.zeros((1, hidden_size))
W2 = np.random.rand(hidden_size, output_size)
b2 = np.zeros((1, output_size))

# Training loop
epochs = 10000
lr = 0.1

for epoch in range(epochs):
    # Forward pass
    z1 = X.dot(W1) + b1
    a1 = sigmoid(z1)
    z2 = a1.dot(W2) + b2
    a2 = sigmoid(z2)

    # Compute error
    error = y - a2
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {np.mean(np.square(error)):.4f}")

    # Backpropagation
    d_output = error * sigmoid_deriv(a2)
    d_hidden = d_output.dot(W2.T) * sigmoid_deriv(a1)

    # Update weights and biases
    W2 += a1.T.dot(d_output) * lr
    b2 += np.sum(d_output, axis=0, keepdims=True) * lr
    W1 += X.T.dot(d_hidden) * lr
    b1 += np.sum(d_hidden, axis=0, keepdims=True) * lr

# Final output
print("Final predictions:")
print(np.round(a2, 3))
